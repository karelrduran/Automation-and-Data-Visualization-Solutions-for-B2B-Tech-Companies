import pprint
from typing import List, Tuple

from openai import OpenAI
import json
import datetime
from pydantic import ValidationError

from .file_utils import FileUtils
from .json_utils import JsonUtils
from schemas.company_data import CompanyData

import logging


class OpenAIUtils:
    """
    Utility class for interacting with OpenAI's GPT-3.5 API to generate JSON reports based on company data.
    """
    def __init__(self, api_key: str, instruction: str, company_reports: List[str], example_output: json):
        """
        Initialize the OpenAIUtils instance.

        Args:
            api_key (str): API key for accessing OpenAI services.
            instruction (str): Initial instruction for generating reports.
            company_reports (List[str]): List of file paths containing company reports.
            example_output (json): Example JSON output structure for validation.
        """
        self.client = OpenAI(api_key=api_key)
        self.instruction = instruction
        self.company_reports = company_reports
        self.example_output = example_output
        self.system_messages = {"role": "system",
                                "content": "You are a wizard that provides economic information in JSON format."}
        self.assistant_response = {}

    def create_initial_prompt(self) -> str:
        """
        Create the initial prompt for OpenAI based on provided instruction and company reports.

        Returns:
            str: Initial prompt string.
        """
        reports = ''.join(self.company_reports)

        initial_prompt = (self.instruction + "\n" + reports + "\n" + "Example Output:\n" + self.example_output +
                          "\n Do not forget to check that the format of the json output is correct, because this "
                          "output will be checked against a pydantic model. Do not put any additional text before or "
                          "after the external { } of the json structure.")

        return initial_prompt

    def openai_call(self, prompt: str) -> str:
        """
        Make a call to OpenAI's GPT-3.5 API with a given prompt and retrieve the response.

        Args:
            prompt (str): Prompt to be sent to the OpenAI API.

        Returns:
            str: Response generated by OpenAI's model.
        """
        message = [self.system_messages, {"role": "user", "content": self.create_initial_prompt()}]

        completion = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=message,
        )

        # Add ChatGPT response to history with the wizard role
        response = completion.choices[0].message.content
        self.assistant_response = {"role": "assistant", "content": response}

        return response


# instruction = """I will provide you with reports from different companies. For the first company, I am running a marketing campaign, and the others are direct competitors of this company. I want you to review the data mentioned for each company and generate a detailed analysis including key metrics such as ROI and success rate in JSON format. If a value is missing, mark it as null:
# """
# company_reports = FileUtils.read_multiple_files(
#     ['../data/reports/EcoBites/EcoBites.txt',
#      '../data/reports/EcoBites/GreenSnacks.txt',
#      '../data/reports/EcoBites/HealthyCrunch.txt',
#      '../data/reports/EcoBites/PureSnack.txt']
# )
#
# example_output = JsonUtils.to_str('../data/json/example_output.json')


def json_validator(report: json) -> Tuple[bool, json]:
    """
    Validate a JSON report against a Pydantic model.

    Args:
        report (json): JSON data to validate.

    Returns:
        Tuple[bool, json]: Validation result (True if valid, False otherwise) and the processed JSON data.
    """
    try:
        # Validate JSON according to the Pydantic model
        company_data = CompanyData(**report)
        company_name = report["companies"][0]['name']

        now = datetime.datetime.now()
        now.strftime("%Y-%m-%d_%H-%M-%S")
        JsonUtils.write_json(filename=f'data/json/company_{company_name}_{now}.json', data=report)
        return True, report
    except ValidationError as e:
        return False, e.json()


def get_json_from_company_reports(openai_api_key: str, instruction: str, company_reports: List[str],
                                  example_output: json):
    """
    Generate JSON reports from multiple company reports using OpenAI's GPT-3.5 API.

    Args:
        openai_api_key (str): API key for accessing OpenAI services.
        instruction (str): Initial instruction for generating reports.
        company_reports (List[str]): List of file paths containing company reports.
        example_output (json): Example JSON output structure for validation.

    Returns:
        Tuple[bool, json]: Validation result (True if valid JSON generated, False otherwise) and the generated JSON data.
    """

    logging.getLogger().setLevel(logging.INFO)

    # Send initial prompt and get response
    openai_obj = OpenAIUtils(api_key=openai_api_key, instruction=instruction,
                             company_reports=company_reports, example_output=example_output)
    output = openai_obj.openai_call(openai_obj.create_initial_prompt())

    is_valid = True
    data_dict = {}
    result = ""

    try:
        data_dict = json.loads(output)

    except json.decoder.JSONDecodeError as e:
        is_valid = False
        result = e

    if is_valid:
        is_valid, result = json_validator(data_dict)

    # data_dict = json.loads(output)
    # is_valid, result = json_validator(data_dict)

    attempts = 0
    while (attempts < 10) and (not is_valid):
        logging.info(f"attempt: {attempts}")

        correction_prompt = f"""
        The following JSON has errors:
        {data_dict}
        Errors:
        {result}
        
        Check for missing keys or incorrect value format
        Please correct it to comply with the following format:
        {example_output}
        Just include the json in the output
        """

        response = openai_obj.openai_call(correction_prompt)
        logging.info(f"-------- response --------\n {response}")
        logging.info(f"Error: {result}")

        # data_dict = json.loads(response)
        # is_valid, result = json_validator(data_dict)

        try:
            data_dict = json.loads(output)

        except json.decoder.JSONDecodeError as e:
            is_valid = False
            result = e

        if is_valid:
            is_valid, result = json_validator(data_dict)

        attempts += 1

    if is_valid:
        logging.info(f"Valid json: {data_dict}")
        logging.info("Historical messages:")
        for elem in openai_obj.assistant_response:
            logging.info(elem)
    else:
        logging.info(f"Invalid json: {data_dict}")

    return is_valid, result


# get_json_from_company_reports(openai_api_key='YOUR_API_KEY',
#                               instruction=instruction, company_reports=company_reports, example_output=example_output)
